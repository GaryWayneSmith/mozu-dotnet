
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;

namespace Mozu.Api.Clients.Platform.Developer
{
	/// <summary>
	/// Use the Applications resource to manage the applications associated with a developer account.
	/// </summary>
	public partial class ApplicationClient 	{
		
		/// <summary>
		/// Retrieves the list of applications associated with the developer account scoped to the user claim specified in the request.
		/// </summary>
		/// <param name="responseFields"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.ApplicationCollection"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetAllApplications( responseFields);
		///   var applicationCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.ApplicationCollection> GetAllApplicationsClient(string responseFields =  null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationUrl.GetAllApplicationsUrl(responseFields);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.ApplicationCollection>()
									.WithVerb(verb).WithResourceUrl(url)
;
			return mozuClient;

		}

		/// <summary>
		/// Retrieves the metadata of a file in a package for an application version. The application must be associated with the developer account scoped to the user claim specified in the request.
		/// </summary>
		/// <param name="applicationId"></param>
		/// <param name="itempath">Complete file directory location and name of the item in the package to retrieve metadata.</param>
		/// <param name="packageId">Unique identifier of the package.</param>
		/// <param name="responseFields"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetPackageItemMetadata( applicationId,  packageId,  itempath,  responseFields);
		///   var fileMetadataClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> GetPackageItemMetadataClient(int applicationId, int packageId, string itempath, string responseFields =  null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationUrl.GetPackageItemMetadataUrl(applicationId, packageId, itempath, responseFields);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata>()
									.WithVerb(verb).WithResourceUrl(url)
;
			return mozuClient;

		}

		/// <summary>
		/// Retrieves the metadata for items in a package associated with an application version, including a list of all files and subfolders. The application must be associated with the developer account scoped to the user claim specified in the request.
		/// </summary>
		/// <param name="applicationId"></param>
		/// <param name="packageId">Unique identifier of the package.</param>
		/// <param name="responseFields"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.FolderMetadata"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetPackageItemsMetadata( applicationId,  packageId,  responseFields);
		///   var folderMetadataClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.FolderMetadata> GetPackageItemsMetadataClient(int applicationId, int packageId, string responseFields =  null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationUrl.GetPackageItemsMetadataUrl(applicationId, packageId, responseFields);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.FolderMetadata>()
									.WithVerb(verb).WithResourceUrl(url)
;
			return mozuClient;

		}

		/// <summary>
		/// Retrieves the package of files and sends them to a compressed (zipped) archive.
		/// </summary>
		/// <param name="applicationId"></param>
		/// <param name="packageId">The unique identifier of the package to zip.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="System.IO.Stream"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetPackageFilesZip( applicationId,  packageId);
		///   var streamClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<System.IO.Stream> GetPackageFilesZipClient(int applicationId, int packageId)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationUrl.GetPackageFilesZipUrl(applicationId, packageId);
			const string verb = "GET";
			var mozuClient = new MozuClient<System.IO.Stream>()
									.WithVerb(verb).WithResourceUrl(url)
;
			return mozuClient;

		}

		/// <summary>
		/// Retrieves the details of a package definition associated with an application version. The application must be associated with the developer account scoped to the user claim specified in the request.
		/// </summary>
		/// <param name="packageId">Unique identifier of the package to retrieve.</param>
		/// <param name="responseFields"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.Package"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetPackage( packageId,  responseFields);
		///   var packageClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.Package> GetPackageClient(int packageId, string responseFields =  null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationUrl.GetPackageUrl(packageId, responseFields);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.Package>()
									.WithVerb(verb).WithResourceUrl(url)
;
			return mozuClient;

		}

		/// <summary>
		/// Retrieves a list of the package definitions created for an application version, including all development packages and release packages. The application must be associated with the developer account scoped to the user claim specified in the request.
		/// </summary>
		/// <param name="applicationId"></param>
		/// <param name="responseFields"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.PackageCollection"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetPackages( applicationId,  responseFields);
		///   var packageCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.PackageCollection> GetPackagesClient(int applicationId, string responseFields =  null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationUrl.GetPackagesUrl(applicationId, responseFields);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.PackageCollection>()
									.WithVerb(verb).WithResourceUrl(url)
;
			return mozuClient;

		}

		/// <summary>
		/// Retrieves the details of the application specified in the request. The application specified in the request must be associated with the developer account scoped to the user claim specified in the request header, otherwise the operation returns an error.
		/// </summary>
		/// <param name="applicationId">Unique identifier of the application.</param>
		/// <param name="responseFields"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.Application"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetApplication( applicationId,  responseFields);
		///   var applicationClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.Application> GetApplicationClient(int applicationId, string responseFields =  null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationUrl.GetApplicationUrl(applicationId, responseFields);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.Application>()
									.WithVerb(verb).WithResourceUrl(url)
;
			return mozuClient;

		}

		/// <summary>
		/// Update the file name or file path of a development package or release package.
		/// </summary>
		/// <param name="applicationId"></param>
		/// <param name="packageId">The unique identifier of the development or release package.</param>
		/// <param name="responseFields"></param>
		/// <param name="renameInfo">The file name or path to rename the package.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=ChangePackageFileNameOrPath( renameInfo,  applicationId,  packageId,  responseFields);
		///   var fileMetadataClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> ChangePackageFileNameOrPathClient(Mozu.Api.Contracts.AppDev.RenameInfo renameInfo, int applicationId, int packageId, string responseFields =  null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationUrl.ChangePackageFileNameOrPathUrl(applicationId, packageId, responseFields);
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata>()
									.WithVerb(verb).WithResourceUrl(url)
									.WithBody<Mozu.Api.Contracts.AppDev.RenameInfo>(renameInfo);
			return mozuClient;

		}

		/// <summary>
		/// Uploads a file to a defined package for an application version in the file location specified in the request.
		/// </summary>
		/// <param name="applicationId"></param>
		/// <param name="filepath">The file location to which to add the package file.</param>
		/// <param name="packageId">Unique identifier of the package.</param>
		/// <param name="responseFields"></param>
		/// <param name="stream">The contents of the package file to upload, which requires a content-type value of "application/octet-stream" in the request header.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=AddPackageFile( stream,  applicationId,  packageId,  filepath,  responseFields,  contentType);
		///   var fileMetadataClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> AddPackageFileClient(System.IO.Stream stream, int applicationId, int packageId, string filepath, string responseFields =  null, String  contentType= null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationUrl.AddPackageFileUrl(applicationId, packageId, filepath, responseFields);
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata>()
									.WithVerb(verb).WithResourceUrl(url)
									.WithBody(stream)									.WithHeader(Headers.CONTENT_TYPE ,contentType)
;
			return mozuClient;

		}

		/// <summary>
		/// Creates a new development or release package for the application version specified in the request.
		/// </summary>
		/// <param name="applicationId"></param>
		/// <param name="responseFields"></param>
		/// <param name="package">Properties of the development or release package to define.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.Package"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=AddPackage( pkg,  applicationId,  responseFields);
		///   var packageClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.Package> AddPackageClient(Mozu.Api.Contracts.AppDev.Package pkg, int applicationId, string responseFields =  null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationUrl.AddPackageUrl(applicationId, responseFields);
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.Package>()
									.WithVerb(verb).WithResourceUrl(url)
									.WithBody<Mozu.Api.Contracts.AppDev.Package>(pkg);
			return mozuClient;

		}

		/// <summary>
		/// Updates one or more properties of a file in a package associated with an application version.
		/// </summary>
		/// <param name="applicationId"></param>
		/// <param name="filepath">The location path and name that identifies the package file to update.</param>
		/// <param name="packageId">The unique identifier of the package.</param>
		/// <param name="responseFields"></param>
		/// <param name="stream">The contents of the package file to update, which requires a content-type value of "application/octet-stream" in the request header.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=UpdatePackageFile( stream,  applicationId,  packageId,  filepath,  responseFields,  contentType);
		///   var fileMetadataClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> UpdatePackageFileClient(System.IO.Stream stream, int applicationId, int packageId, string filepath, string responseFields =  null, String  contentType= null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationUrl.UpdatePackageFileUrl(applicationId, packageId, filepath, responseFields);
			const string verb = "PUT";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata>()
									.WithVerb(verb).WithResourceUrl(url)
									.WithBody(stream)									.WithHeader(Headers.CONTENT_TYPE ,contentType)
;
			return mozuClient;

		}

		/// <summary>
		/// Deletes the specified file from a package associated with an application version.
		/// </summary>
		/// <param name="applicationId"></param>
		/// <param name="filepath">The file path and name of the file location to delete from the package.</param>
		/// <param name="packageId">Unique identifier of the package.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=DeletePackageFile( applicationId,  packageId,  filepath);
		///mozuClient.WithBaseAddress(url).Execute();
		/// </code>
		/// </example>
		public static MozuClient DeletePackageFileClient(int applicationId, int packageId, string filepath)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationUrl.DeletePackageFileUrl(applicationId, packageId, filepath);
			const string verb = "DELETE";
			var mozuClient = new MozuClient()
									.WithVerb(verb).WithResourceUrl(url)
;
			return mozuClient;

		}


	}

}


