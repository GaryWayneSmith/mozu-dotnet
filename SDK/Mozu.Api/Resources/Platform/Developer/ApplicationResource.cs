
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Codezu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;

namespace Mozu.Api.Resources.Platform.Developer
{
	/// <summary>
	/// Use the Applications resource to manage the applications associated with a developer account.
	/// </summary>
	public partial class ApplicationResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;

		
		public ApplicationResource() 
		{
			_apiContext = null;
		}
		 public ApplicationResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}
				
		/// <summary>
		/// Retrieves the list of applications associated with the developer account scoped to the user claim specified in the request.
		/// </summary>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.ApplicationCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var application = new Application();
		///   var applicationCollection = application.GetAllApplications( responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.AppDev.ApplicationCollection GetAllApplications(string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.ApplicationCollection> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.GetAllApplicationsClient( responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		public virtual async Task<Mozu.Api.Contracts.AppDev.ApplicationCollection> GetAllApplicationsAsync(string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.ApplicationCollection> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.GetAllApplicationsClient( responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Retrieves the metadata of a file in a package for an application version. The application must be associated with the developer account scoped to the user claim specified in the request.
		/// </summary>
		/// <param name="applicationId"></param>
		/// <param name="itempath">Complete file directory location and name of the item in the package to retrieve metadata.</param>
		/// <param name="packageId">Unique identifier of the package.</param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var application = new Application();
		///   var fileMetadata = application.GetPackageItemMetadata( applicationId,  packageId,  itempath,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.AppDev.FileMetadata GetPackageItemMetadata(int applicationId, int packageId, string itempath, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.GetPackageItemMetadataClient( applicationId,  packageId,  itempath,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		public virtual async Task<Mozu.Api.Contracts.AppDev.FileMetadata> GetPackageItemMetadataAsync(int applicationId, int packageId, string itempath, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.GetPackageItemMetadataClient( applicationId,  packageId,  itempath,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Retrieves the metadata for items in a package associated with an application version, including a list of all files and subfolders. The application must be associated with the developer account scoped to the user claim specified in the request.
		/// </summary>
		/// <param name="applicationId"></param>
		/// <param name="packageId">Unique identifier of the package.</param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.FolderMetadata"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var application = new Application();
		///   var folderMetadata = application.GetPackageItemsMetadata( applicationId,  packageId,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.AppDev.FolderMetadata GetPackageItemsMetadata(int applicationId, int packageId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FolderMetadata> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.GetPackageItemsMetadataClient( applicationId,  packageId,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		public virtual async Task<Mozu.Api.Contracts.AppDev.FolderMetadata> GetPackageItemsMetadataAsync(int applicationId, int packageId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FolderMetadata> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.GetPackageItemsMetadataClient( applicationId,  packageId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Retrieves the package of files and sends them to a compressed (zipped) archive.
		/// </summary>
		/// <param name="applicationId"></param>
		/// <param name="packageId">The unique identifier of the package to zip.</param>
		/// <returns>
		/// <see cref="System.IO.Stream"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var application = new Application();
		///   var stream = application.GetPackageFilesZip( applicationId,  packageId);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual System.IO.Stream GetPackageFilesZip(int applicationId, int packageId)
		{
			MozuClient<System.IO.Stream> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.GetPackageFilesZipClient( applicationId,  packageId);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		public virtual async Task<System.IO.Stream> GetPackageFilesZipAsync(int applicationId, int packageId)
		{
			MozuClient<System.IO.Stream> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.GetPackageFilesZipClient( applicationId,  packageId);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Retrieves the details of a package definition associated with an application version. The application must be associated with the developer account scoped to the user claim specified in the request.
		/// </summary>
		/// <param name="packageId">Unique identifier of the package to retrieve.</param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.Package"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var application = new Application();
		///   var package = application.GetPackage( packageId,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.AppDev.Package GetPackage(int packageId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.Package> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.GetPackageClient( packageId,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		public virtual async Task<Mozu.Api.Contracts.AppDev.Package> GetPackageAsync(int packageId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.Package> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.GetPackageClient( packageId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Retrieves a list of the package definitions created for an application version, including all development packages and release packages. The application must be associated with the developer account scoped to the user claim specified in the request.
		/// </summary>
		/// <param name="applicationId"></param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.PackageCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var application = new Application();
		///   var packageCollection = application.GetPackages( applicationId,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.AppDev.PackageCollection GetPackages(int applicationId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.PackageCollection> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.GetPackagesClient( applicationId,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		public virtual async Task<Mozu.Api.Contracts.AppDev.PackageCollection> GetPackagesAsync(int applicationId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.PackageCollection> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.GetPackagesClient( applicationId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Retrieves the details of the application specified in the request. The application specified in the request must be associated with the developer account scoped to the user claim specified in the request header, otherwise the operation returns an error.
		/// </summary>
		/// <param name="applicationId">Unique identifier of the application.</param>
		/// <param name="responseFields"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.Application"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var application = new Application();
		///   var application = application.GetApplication( applicationId,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.AppDev.Application GetApplication(int applicationId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.Application> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.GetApplicationClient( applicationId,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		public virtual async Task<Mozu.Api.Contracts.AppDev.Application> GetApplicationAsync(int applicationId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.Application> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.GetApplicationClient( applicationId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Update the file name or file path of a development package or release package.
		/// </summary>
		/// <param name="applicationId"></param>
		/// <param name="packageId">The unique identifier of the development or release package.</param>
		/// <param name="responseFields"></param>
		/// <param name="renameInfo">The file name or path to rename the package.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var application = new Application();
		///   var fileMetadata = application.ChangePackageFileNameOrPath( renameInfo,  applicationId,  packageId,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.AppDev.FileMetadata ChangePackageFileNameOrPath(Mozu.Api.Contracts.AppDev.RenameInfo renameInfo, int applicationId, int packageId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.ChangePackageFileNameOrPathClient( renameInfo,  applicationId,  packageId,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		public virtual async Task<Mozu.Api.Contracts.AppDev.FileMetadata> ChangePackageFileNameOrPathAsync(Mozu.Api.Contracts.AppDev.RenameInfo renameInfo, int applicationId, int packageId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.ChangePackageFileNameOrPathClient( renameInfo,  applicationId,  packageId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Uploads a file to a defined package for an application version in the file location specified in the request.
		/// </summary>
		/// <param name="applicationId"></param>
		/// <param name="filepath">The file location to which to add the package file.</param>
		/// <param name="packageId">Unique identifier of the package.</param>
		/// <param name="responseFields"></param>
		/// <param name="stream">The contents of the package file to upload, which requires a content-type value of "application/octet-stream" in the request header.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var application = new Application();
		///   var fileMetadata = application.AddPackageFile( stream,  applicationId,  packageId,  filepath,  responseFields,  contentType);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.AppDev.FileMetadata AddPackageFile(System.IO.Stream stream, int applicationId, int packageId, string filepath, string responseFields =  null, String  contentType= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.AddPackageFileClient( stream,  applicationId,  packageId,  filepath,  responseFields,  contentType);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		public virtual async Task<Mozu.Api.Contracts.AppDev.FileMetadata> AddPackageFileAsync(System.IO.Stream stream, int applicationId, int packageId, string filepath, string responseFields =  null, String  contentType= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.AddPackageFileClient( stream,  applicationId,  packageId,  filepath,  responseFields,  contentType);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Creates a new development or release package for the application version specified in the request.
		/// </summary>
		/// <param name="applicationId"></param>
		/// <param name="responseFields"></param>
		/// <param name="package">Properties of the development or release package to define.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.Package"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var application = new Application();
		///   var package = application.AddPackage( pkg,  applicationId,  responseFields);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.AppDev.Package AddPackage(Mozu.Api.Contracts.AppDev.Package pkg, int applicationId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.Package> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.AddPackageClient( pkg,  applicationId,  responseFields);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		public virtual async Task<Mozu.Api.Contracts.AppDev.Package> AddPackageAsync(Mozu.Api.Contracts.AppDev.Package pkg, int applicationId, string responseFields =  null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.Package> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.AddPackageClient( pkg,  applicationId,  responseFields);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Updates one or more properties of a file in a package associated with an application version.
		/// </summary>
		/// <param name="applicationId"></param>
		/// <param name="filepath">The location path and name that identifies the package file to update.</param>
		/// <param name="packageId">The unique identifier of the package.</param>
		/// <param name="responseFields"></param>
		/// <param name="stream">The contents of the package file to update, which requires a content-type value of "application/octet-stream" in the request header.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var application = new Application();
		///   var fileMetadata = application.UpdatePackageFile( stream,  applicationId,  packageId,  filepath,  responseFields,  contentType);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual Mozu.Api.Contracts.AppDev.FileMetadata UpdatePackageFile(System.IO.Stream stream, int applicationId, int packageId, string filepath, string responseFields =  null, String  contentType= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.UpdatePackageFileClient( stream,  applicationId,  packageId,  filepath,  responseFields,  contentType);
			client.WithContext(_apiContext);
			response = client.Execute();
			return response.Result();

		}

		public virtual async Task<Mozu.Api.Contracts.AppDev.FileMetadata> UpdatePackageFileAsync(System.IO.Stream stream, int applicationId, int packageId, string filepath, string responseFields =  null, String  contentType= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.UpdatePackageFileClient( stream,  applicationId,  packageId,  filepath,  responseFields,  contentType);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();
			return await response.ResultAsync();

		}

		/// <summary>
		/// Deletes the specified file from a package associated with an application version.
		/// </summary>
		/// <param name="applicationId"></param>
		/// <param name="filepath">The file path and name of the file location to delete from the package.</param>
		/// <param name="packageId">Unique identifier of the package.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var application = new Application();
		///   application.DeletePackageFile( applicationId,  packageId,  filepath);
		/// </code>
		/// </example>
		[Obsolete("This method is obsolete; use the async method instead")]
		public virtual void DeletePackageFile(int applicationId, int packageId, string filepath)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.DeletePackageFileClient( applicationId,  packageId,  filepath);
			client.WithContext(_apiContext);
			response = client.Execute();

		}

		public virtual async Task DeletePackageFileAsync(int applicationId, int packageId, string filepath)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationClient.DeletePackageFileClient( applicationId,  packageId,  filepath);
			client.WithContext(_apiContext);
			response = await client.ExecuteAsync();

		}


	}

}


